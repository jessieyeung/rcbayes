// Generated by rstantools.  Do not edit by hand.

/*
    rcbayes is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rcbayes is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rcbayes.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_rcmodel_normal_sigma_given_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 79> locations_array__ =
  {" (found before start of program)",
  " (in 'rcmodel_normal_sigma_given', line 12, column 2 to column 48)",
  " (in 'rcmodel_normal_sigma_given', line 13, column 2 to column 44)",
  " (in 'rcmodel_normal_sigma_given', line 14, column 2 to column 43)",
  " (in 'rcmodel_normal_sigma_given', line 15, column 2 to column 53)",
  " (in 'rcmodel_normal_sigma_given', line 16, column 2 to column 49)",
  " (in 'rcmodel_normal_sigma_given', line 17, column 2 to column 48)",
  " (in 'rcmodel_normal_sigma_given', line 18, column 2 to column 53)",
  " (in 'rcmodel_normal_sigma_given', line 19, column 2 to column 41)",
  " (in 'rcmodel_normal_sigma_given', line 20, column 2 to column 54)",
  " (in 'rcmodel_normal_sigma_given', line 21, column 2 to column 45)",
  " (in 'rcmodel_normal_sigma_given', line 22, column 2 to column 44)",
  " (in 'rcmodel_normal_sigma_given', line 23, column 2 to column 52)",
  " (in 'rcmodel_normal_sigma_given', line 24, column 2 to column 27)",
  " (in 'rcmodel_normal_sigma_given', line 27, column 2 to column 18)",
  " (in 'rcmodel_normal_sigma_given', line 28, column 2 to column 20)",
  " (in 'rcmodel_normal_sigma_given', line 29, column 2 to column 20)",
  " (in 'rcmodel_normal_sigma_given', line 30, column 2 to column 20)",
  " (in 'rcmodel_normal_sigma_given', line 31, column 2 to column 20)",
  " (in 'rcmodel_normal_sigma_given', line 32, column 2 to column 17)",
  " (in 'rcmodel_normal_sigma_given', line 34, column 4 to column 16)",
  " (in 'rcmodel_normal_sigma_given', line 33, column 15 to line 35, column 3)",
  " (in 'rcmodel_normal_sigma_given', line 33, column 2 to line 35, column 3)",
  " (in 'rcmodel_normal_sigma_given', line 36, column 2 to column 60)",
  " (in 'rcmodel_normal_sigma_given', line 37, column 2 to column 99)",
  " (in 'rcmodel_normal_sigma_given', line 38, column 2 to column 98)",
  " (in 'rcmodel_normal_sigma_given', line 39, column 2 to column 62)",
  " (in 'rcmodel_normal_sigma_given', line 40, column 2 to column 52)",
  " (in 'rcmodel_normal_sigma_given', line 44, column 2 to column 27)",
  " (in 'rcmodel_normal_sigma_given', line 47, column 4 to column 25)",
  " (in 'rcmodel_normal_sigma_given', line 48, column 4 to column 23)",
  " (in 'rcmodel_normal_sigma_given', line 46, column 24 to line 49, column 3)",
  " (in 'rcmodel_normal_sigma_given', line 46, column 2 to line 49, column 3)",
  " (in 'rcmodel_normal_sigma_given', line 51, column 4 to column 25)",
  " (in 'rcmodel_normal_sigma_given', line 52, column 4 to column 23)",
  " (in 'rcmodel_normal_sigma_given', line 53, column 4 to column 23)",
  " (in 'rcmodel_normal_sigma_given', line 54, column 4 to column 26)",
  " (in 'rcmodel_normal_sigma_given', line 50, column 20 to line 55, column 3)",
  " (in 'rcmodel_normal_sigma_given', line 50, column 2 to line 55, column 3)",
  " (in 'rcmodel_normal_sigma_given', line 57, column 4 to column 25)",
  " (in 'rcmodel_normal_sigma_given', line 58, column 4 to column 23)",
  " (in 'rcmodel_normal_sigma_given', line 59, column 4 to column 23)",
  " (in 'rcmodel_normal_sigma_given', line 60, column 4 to column 26)",
  " (in 'rcmodel_normal_sigma_given', line 56, column 19 to line 61, column 3)",
  " (in 'rcmodel_normal_sigma_given', line 56, column 2 to line 61, column 3)",
  " (in 'rcmodel_normal_sigma_given', line 63, column 4 to column 24)",
  " (in 'rcmodel_normal_sigma_given', line 64, column 4 to column 29)",
  " (in 'rcmodel_normal_sigma_given', line 62, column 24 to line 65, column 3)",
  " (in 'rcmodel_normal_sigma_given', line 62, column 2 to line 65, column 3)",
  " (in 'rcmodel_normal_sigma_given', line 66, column 2 to column 25)",
  " (in 'rcmodel_normal_sigma_given', line 67, column 2 to column 22)",
  " (in 'rcmodel_normal_sigma_given', line 2, column 2 to column 39)",
  " (in 'rcmodel_normal_sigma_given', line 3, column 2 to column 35)",
  " (in 'rcmodel_normal_sigma_given', line 4, column 2 to column 34)",
  " (in 'rcmodel_normal_sigma_given', line 5, column 2 to column 39)",
  " (in 'rcmodel_normal_sigma_given', line 6, column 2 to column 17)",
  " (in 'rcmodel_normal_sigma_given', line 7, column 9 to column 10)",
  " (in 'rcmodel_normal_sigma_given', line 7, column 2 to column 14)",
  " (in 'rcmodel_normal_sigma_given', line 8, column 9 to column 10)",
  " (in 'rcmodel_normal_sigma_given', line 8, column 2 to column 14)",
  " (in 'rcmodel_normal_sigma_given', line 9, column 2 to column 22)",
  " (in 'rcmodel_normal_sigma_given', line 12, column 8 to column 25)",
  " (in 'rcmodel_normal_sigma_given', line 13, column 8 to column 21)",
  " (in 'rcmodel_normal_sigma_given', line 14, column 8 to column 20)",
  " (in 'rcmodel_normal_sigma_given', line 15, column 8 to column 25)",
  " (in 'rcmodel_normal_sigma_given', line 16, column 8 to column 21)",
  " (in 'rcmodel_normal_sigma_given', line 17, column 8 to column 20)",
  " (in 'rcmodel_normal_sigma_given', line 18, column 8 to column 25)",
  " (in 'rcmodel_normal_sigma_given', line 19, column 8 to column 21)",
  " (in 'rcmodel_normal_sigma_given', line 20, column 8 to column 20)",
  " (in 'rcmodel_normal_sigma_given', line 21, column 8 to column 21)",
  " (in 'rcmodel_normal_sigma_given', line 22, column 8 to column 20)",
  " (in 'rcmodel_normal_sigma_given', line 23, column 8 to column 25)",
  " (in 'rcmodel_normal_sigma_given', line 27, column 9 to column 10)",
  " (in 'rcmodel_normal_sigma_given', line 28, column 9 to column 10)",
  " (in 'rcmodel_normal_sigma_given', line 29, column 9 to column 10)",
  " (in 'rcmodel_normal_sigma_given', line 30, column 9 to column 10)",
  " (in 'rcmodel_normal_sigma_given', line 31, column 9 to column 10)",
  " (in 'rcmodel_normal_sigma_given', line 32, column 9 to column 10)"};
#include <stan_meta_header.hpp>
class model_rcmodel_normal_sigma_given final : public model_base_crtp<model_rcmodel_normal_sigma_given> {
private:
  int pre_working_age;
  int working_age;
  int retirement;
  int post_retirement;
  int N;
  Eigen::Matrix<double,-1,1> x_data__;
  Eigen::Matrix<double,-1,1> y_data__;
  double sigma;
  int alpha1_1dim__;
  int alpha2_1dim__;
  int alpha3_1dim__;
  int a1_1dim__;
  int a2_1dim__;
  int a3_1dim__;
  int a4_1dim__;
  int mu2_1dim__;
  int mu3_1dim__;
  int lambda2_1dim__;
  int lambda3_1dim__;
  int lambda4_1dim__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> x{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> y{nullptr, 0};
public:
  ~model_rcmodel_normal_sigma_given() {}
  model_rcmodel_normal_sigma_given(stan::io::var_context& context__,
                                   unsigned int random_seed__ = 0,
                                   std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_rcmodel_normal_sigma_given_namespace::model_rcmodel_normal_sigma_given";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 51;
      context__.validate_dims("data initialization", "pre_working_age",
        "int", std::vector<size_t>{});
      pre_working_age = std::numeric_limits<int>::min();
      current_statement__ = 51;
      pre_working_age = context__.vals_i("pre_working_age")[(1 - 1)];
      current_statement__ = 51;
      stan::math::check_greater_or_equal(function__, "pre_working_age",
        pre_working_age, 0);
      current_statement__ = 51;
      stan::math::check_less_or_equal(function__, "pre_working_age",
        pre_working_age, 1);
      current_statement__ = 52;
      context__.validate_dims("data initialization", "working_age", "int",
        std::vector<size_t>{});
      working_age = std::numeric_limits<int>::min();
      current_statement__ = 52;
      working_age = context__.vals_i("working_age")[(1 - 1)];
      current_statement__ = 52;
      stan::math::check_greater_or_equal(function__, "working_age",
        working_age, 0);
      current_statement__ = 52;
      stan::math::check_less_or_equal(function__, "working_age", working_age,
        1);
      current_statement__ = 53;
      context__.validate_dims("data initialization", "retirement", "int",
        std::vector<size_t>{});
      retirement = std::numeric_limits<int>::min();
      current_statement__ = 53;
      retirement = context__.vals_i("retirement")[(1 - 1)];
      current_statement__ = 53;
      stan::math::check_greater_or_equal(function__, "retirement",
        retirement, 0);
      current_statement__ = 53;
      stan::math::check_less_or_equal(function__, "retirement", retirement, 1);
      current_statement__ = 54;
      context__.validate_dims("data initialization", "post_retirement",
        "int", std::vector<size_t>{});
      post_retirement = std::numeric_limits<int>::min();
      current_statement__ = 54;
      post_retirement = context__.vals_i("post_retirement")[(1 - 1)];
      current_statement__ = 54;
      stan::math::check_greater_or_equal(function__, "post_retirement",
        post_retirement, 0);
      current_statement__ = 54;
      stan::math::check_less_or_equal(function__, "post_retirement",
        post_retirement, 1);
      current_statement__ = 55;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 55;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 55;
      stan::math::check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 56;
      stan::math::validate_non_negative_index("x", "N", N);
      current_statement__ = 57;
      context__.validate_dims("data initialization", "x", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      x_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                   std::numeric_limits<double>::quiet_NaN());
      new (&x) Eigen::Map<Eigen::Matrix<double,-1,1>>(x_data__.data(), N);
      {
        std::vector<local_scalar_t__> x_flat__;
        current_statement__ = 57;
        x_flat__ = context__.vals_r("x");
        current_statement__ = 57;
        pos__ = 1;
        current_statement__ = 57;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 57;
          stan::model::assign(x, x_flat__[(pos__ - 1)],
            "assigning variable x", stan::model::index_uni(sym1__));
          current_statement__ = 57;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 58;
      stan::math::validate_non_negative_index("y", "N", N);
      current_statement__ = 59;
      context__.validate_dims("data initialization", "y", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      y_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                   std::numeric_limits<double>::quiet_NaN());
      new (&y) Eigen::Map<Eigen::Matrix<double,-1,1>>(y_data__.data(), N);
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 59;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 59;
        pos__ = 1;
        current_statement__ = 59;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 59;
          stan::model::assign(y, y_flat__[(pos__ - 1)],
            "assigning variable y", stan::model::index_uni(sym1__));
          current_statement__ = 59;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 60;
      context__.validate_dims("data initialization", "sigma", "double",
        std::vector<size_t>{});
      sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 60;
      sigma = context__.vals_r("sigma")[(1 - 1)];
      current_statement__ = 60;
      stan::math::check_greater_or_equal(function__, "sigma", sigma, 0);
      current_statement__ = 61;
      alpha1_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 61;
      alpha1_1dim__ = (1 * pre_working_age);
      current_statement__ = 61;
      stan::math::validate_non_negative_index("alpha1",
        "1 * pre_working_age", alpha1_1dim__);
      current_statement__ = 62;
      alpha2_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 62;
      alpha2_1dim__ = (1 * working_age);
      current_statement__ = 62;
      stan::math::validate_non_negative_index("alpha2", "1 * working_age",
        alpha2_1dim__);
      current_statement__ = 63;
      alpha3_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 63;
      alpha3_1dim__ = (1 * retirement);
      current_statement__ = 63;
      stan::math::validate_non_negative_index("alpha3", "1 * retirement",
        alpha3_1dim__);
      current_statement__ = 64;
      a1_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 64;
      a1_1dim__ = (1 * pre_working_age);
      current_statement__ = 64;
      stan::math::validate_non_negative_index("a1", "1 * pre_working_age",
        a1_1dim__);
      current_statement__ = 65;
      a2_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 65;
      a2_1dim__ = (1 * working_age);
      current_statement__ = 65;
      stan::math::validate_non_negative_index("a2", "1 * working_age",
        a2_1dim__);
      current_statement__ = 66;
      a3_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 66;
      a3_1dim__ = (1 * retirement);
      current_statement__ = 66;
      stan::math::validate_non_negative_index("a3", "1 * retirement",
        a3_1dim__);
      current_statement__ = 67;
      a4_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 67;
      a4_1dim__ = (1 * post_retirement);
      current_statement__ = 67;
      stan::math::validate_non_negative_index("a4", "1 * post_retirement",
        a4_1dim__);
      current_statement__ = 68;
      mu2_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 68;
      mu2_1dim__ = (1 * working_age);
      current_statement__ = 68;
      stan::math::validate_non_negative_index("mu2", "1 * working_age",
        mu2_1dim__);
      current_statement__ = 69;
      mu3_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 69;
      mu3_1dim__ = (1 * retirement);
      current_statement__ = 69;
      stan::math::validate_non_negative_index("mu3", "1 * retirement",
        mu3_1dim__);
      current_statement__ = 70;
      lambda2_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 70;
      lambda2_1dim__ = (1 * working_age);
      current_statement__ = 70;
      stan::math::validate_non_negative_index("lambda2", "1 * working_age",
        lambda2_1dim__);
      current_statement__ = 71;
      lambda3_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 71;
      lambda3_1dim__ = (1 * retirement);
      current_statement__ = 71;
      stan::math::validate_non_negative_index("lambda3", "1 * retirement",
        lambda3_1dim__);
      current_statement__ = 72;
      lambda4_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 72;
      lambda4_1dim__ = (1 * post_retirement);
      current_statement__ = 72;
      stan::math::validate_non_negative_index("lambda4",
        "1 * post_retirement", lambda4_1dim__);
      current_statement__ = 73;
      stan::math::validate_non_negative_index("mu_rc", "N", N);
      current_statement__ = 74;
      stan::math::validate_non_negative_index("mu_rc_1", "N", N);
      current_statement__ = 75;
      stan::math::validate_non_negative_index("mu_rc_2", "N", N);
      current_statement__ = 76;
      stan::math::validate_non_negative_index("mu_rc_3", "N", N);
      current_statement__ = 77;
      stan::math::validate_non_negative_index("mu_rc_4", "N", N);
      current_statement__ = 78;
      stan::math::validate_non_negative_index("zero", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = alpha1_1dim__ + alpha2_1dim__ + alpha3_1dim__ +
      a1_1dim__ + a2_1dim__ + a3_1dim__ + a4_1dim__ + mu2_1dim__ + mu3_1dim__
      + lambda2_1dim__ + lambda3_1dim__ + lambda4_1dim__ + 1;
  }
  inline std::string model_name() const final {
    return "model_rcmodel_normal_sigma_given";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_rcmodel_normal_sigma_given_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<local_scalar_t__> alpha1 =
        std::vector<local_scalar_t__>(alpha1_1dim__, DUMMY_VAR__);
      current_statement__ = 1;
      alpha1 = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                 jacobian__>(0, lp__, alpha1_1dim__);
      std::vector<local_scalar_t__> alpha2 =
        std::vector<local_scalar_t__>(alpha2_1dim__, DUMMY_VAR__);
      current_statement__ = 2;
      alpha2 = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                 jacobian__>(0, lp__, alpha2_1dim__);
      std::vector<local_scalar_t__> alpha3 =
        std::vector<local_scalar_t__>(alpha3_1dim__, DUMMY_VAR__);
      current_statement__ = 3;
      alpha3 = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                 jacobian__>(0, lp__, alpha3_1dim__);
      std::vector<local_scalar_t__> a1 =
        std::vector<local_scalar_t__>(a1_1dim__, DUMMY_VAR__);
      current_statement__ = 4;
      a1 = in__.template read_constrain_lub<std::vector<local_scalar_t__>,
             jacobian__>(0, 1, lp__, a1_1dim__);
      std::vector<local_scalar_t__> a2 =
        std::vector<local_scalar_t__>(a2_1dim__, DUMMY_VAR__);
      current_statement__ = 5;
      a2 = in__.template read_constrain_lub<std::vector<local_scalar_t__>,
             jacobian__>(0, 1, lp__, a2_1dim__);
      std::vector<local_scalar_t__> a3 =
        std::vector<local_scalar_t__>(a3_1dim__, DUMMY_VAR__);
      current_statement__ = 6;
      a3 = in__.template read_constrain_lub<std::vector<local_scalar_t__>,
             jacobian__>(0, 1, lp__, a3_1dim__);
      std::vector<local_scalar_t__> a4 =
        std::vector<local_scalar_t__>(a4_1dim__, DUMMY_VAR__);
      current_statement__ = 7;
      a4 = in__.template read_constrain_lub<std::vector<local_scalar_t__>,
             jacobian__>(0, 1, lp__, a4_1dim__);
      std::vector<local_scalar_t__> mu2 =
        std::vector<local_scalar_t__>(mu2_1dim__, DUMMY_VAR__);
      current_statement__ = 8;
      mu2 = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
              jacobian__>(0, lp__, mu2_1dim__);
      std::vector<local_scalar_t__> mu3 =
        std::vector<local_scalar_t__>(mu3_1dim__, DUMMY_VAR__);
      current_statement__ = 9;
      mu3 = in__.template read_constrain_lub<std::vector<local_scalar_t__>,
              jacobian__>(0, stan::math::max(x), lp__, mu3_1dim__);
      std::vector<local_scalar_t__> lambda2 =
        std::vector<local_scalar_t__>(lambda2_1dim__, DUMMY_VAR__);
      current_statement__ = 10;
      lambda2 = in__.template read_constrain_lb<
                  std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                  lambda2_1dim__);
      std::vector<local_scalar_t__> lambda3 =
        std::vector<local_scalar_t__>(lambda3_1dim__, DUMMY_VAR__);
      current_statement__ = 11;
      lambda3 = in__.template read_constrain_lb<
                  std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                  lambda3_1dim__);
      std::vector<local_scalar_t__> lambda4 =
        std::vector<local_scalar_t__>(lambda4_1dim__, DUMMY_VAR__);
      current_statement__ = 12;
      lambda4 = in__.template read_constrain_ub<
                  std::vector<local_scalar_t__>, jacobian__>(0.05, lp__,
                  lambda4_1dim__);
      local_scalar_t__ c = DUMMY_VAR__;
      current_statement__ = 13;
      c = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
            1, lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> mu_rc =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> mu_rc_1 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> mu_rc_2 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> mu_rc_3 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> mu_rc_4 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> zero =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 22;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 20;
        stan::model::assign(zero, 0, "assigning variable zero",
          stan::model::index_uni(i));
      }
      current_statement__ = 23;
      stan::model::assign(mu_rc_1,
        (stan::math::logical_eq(pre_working_age, 1) ? stan::math::eval(
                                                        stan::math::multiply(
                                                          stan::model::rvalue(
                                                            a1, "a1",
                                                            stan::model::index_uni(
                                                              1)),
                                                          stan::math::exp(
                                                            stan::math::multiply(
                                                              -stan::model::rvalue(
                                                                 alpha1,
                                                                 "alpha1",
                                                                 stan::model::index_uni(
                                                                   1)), x)))) : 
        stan::math::eval(zero)), "assigning variable mu_rc_1");
      current_statement__ = 24;
      stan::model::assign(mu_rc_2,
        (stan::math::logical_eq(working_age, 1) ? stan::math::eval(
                                                    stan::math::multiply(
                                                      stan::model::rvalue(a2,
                                                        "a2",
                                                        stan::model::index_uni(
                                                          1)),
                                                      stan::math::exp(
                                                        stan::math::subtract(
                                                          stan::math::multiply(
                                                            -stan::model::rvalue(
                                                               alpha2,
                                                               "alpha2",
                                                               stan::model::index_uni(
                                                                 1)),
                                                            stan::math::subtract(
                                                              x,
                                                              stan::model::rvalue(
                                                                mu2, "mu2",
                                                                stan::model::index_uni(
                                                                  1)))),
                                                          stan::math::exp(
                                                            stan::math::multiply(
                                                              -stan::model::rvalue(
                                                                 lambda2,
                                                                 "lambda2",
                                                                 stan::model::index_uni(
                                                                   1)),
                                                              stan::math::subtract(
                                                                x,
                                                                stan::model::rvalue(
                                                                  mu2, "mu2",
                                                                  stan::model::index_uni(
                                                                    1))))))))) : 
        stan::math::eval(zero)), "assigning variable mu_rc_2");
      current_statement__ = 25;
      stan::model::assign(mu_rc_3,
        (stan::math::logical_eq(retirement, 1) ? stan::math::eval(
                                                   stan::math::multiply(
                                                     stan::model::rvalue(a3,
                                                       "a3",
                                                       stan::model::index_uni(
                                                         1)),
                                                     stan::math::exp(
                                                       stan::math::subtract(
                                                         stan::math::multiply(
                                                           -stan::model::rvalue(
                                                              alpha3,
                                                              "alpha3",
                                                              stan::model::index_uni(
                                                                1)),
                                                           stan::math::subtract(
                                                             x,
                                                             stan::model::rvalue(
                                                               mu3, "mu3",
                                                               stan::model::index_uni(
                                                                 1)))),
                                                         stan::math::exp(
                                                           stan::math::multiply(
                                                             -stan::model::rvalue(
                                                                lambda3,
                                                                "lambda3",
                                                                stan::model::index_uni(
                                                                  1)),
                                                             stan::math::subtract(
                                                               x,
                                                               stan::model::rvalue(
                                                                 mu3, "mu3",
                                                                 stan::model::index_uni(
                                                                   1))))))))) : 
        stan::math::eval(zero)), "assigning variable mu_rc_3");
      current_statement__ = 26;
      stan::model::assign(mu_rc_4,
        (stan::math::logical_eq(post_retirement, 1) ? stan::math::eval(
                                                        stan::math::multiply(
                                                          stan::model::rvalue(
                                                            a4, "a4",
                                                            stan::model::index_uni(
                                                              1)),
                                                          stan::math::exp(
                                                            stan::math::multiply(
                                                              stan::model::rvalue(
                                                                lambda4,
                                                                "lambda4",
                                                                stan::model::index_uni(
                                                                  1)), x)))) : 
        stan::math::eval(zero)), "assigning variable mu_rc_4");
      current_statement__ = 27;
      stan::model::assign(mu_rc,
        stan::math::add(
          stan::math::add(
            stan::math::add(stan::math::add(mu_rc_1, mu_rc_2), mu_rc_3),
            mu_rc_4), c), "assigning variable mu_rc");
      {
        current_statement__ = 28;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(y, mu_rc, sigma));
        current_statement__ = 32;
        if (stan::math::logical_eq(pre_working_age, 1)) {
          current_statement__ = 29;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(alpha1, 0, 1));
          current_statement__ = 30;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(a1, 0, 0.1));
        }
        current_statement__ = 38;
        if (stan::math::logical_eq(working_age, 1)) {
          current_statement__ = 33;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(alpha2, 0, 1));
          current_statement__ = 34;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(a2, 0, 0.1));
          current_statement__ = 35;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(mu2, 25, 1));
          current_statement__ = 36;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(lambda2, 0, 1));
        }
        current_statement__ = 44;
        if (stan::math::logical_eq(retirement, 1)) {
          current_statement__ = 39;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(alpha3, 0, 1));
          current_statement__ = 40;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(a3, 0, 0.1));
          current_statement__ = 41;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(mu3, 65, 1));
          current_statement__ = 42;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(lambda3, 0, 1));
        }
        current_statement__ = 48;
        if (stan::math::logical_eq(post_retirement, 1)) {
          current_statement__ = 45;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(a4, 0, 0.05));
          current_statement__ = 46;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(lambda4, 0, 0.01));
        }
        current_statement__ = 49;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(c,
                         stan::math::min(y), 0.1));
        current_statement__ = 50;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sigma, 0, 1));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_rcmodel_normal_sigma_given_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<double> alpha1 =
        std::vector<double>(alpha1_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      alpha1 = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                 jacobian__>(0, lp__, alpha1_1dim__);
      std::vector<double> alpha2 =
        std::vector<double>(alpha2_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      alpha2 = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                 jacobian__>(0, lp__, alpha2_1dim__);
      std::vector<double> alpha3 =
        std::vector<double>(alpha3_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      alpha3 = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                 jacobian__>(0, lp__, alpha3_1dim__);
      std::vector<double> a1 =
        std::vector<double>(a1_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      a1 = in__.template read_constrain_lub<std::vector<local_scalar_t__>,
             jacobian__>(0, 1, lp__, a1_1dim__);
      std::vector<double> a2 =
        std::vector<double>(a2_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      a2 = in__.template read_constrain_lub<std::vector<local_scalar_t__>,
             jacobian__>(0, 1, lp__, a2_1dim__);
      std::vector<double> a3 =
        std::vector<double>(a3_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      a3 = in__.template read_constrain_lub<std::vector<local_scalar_t__>,
             jacobian__>(0, 1, lp__, a3_1dim__);
      std::vector<double> a4 =
        std::vector<double>(a4_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 7;
      a4 = in__.template read_constrain_lub<std::vector<local_scalar_t__>,
             jacobian__>(0, 1, lp__, a4_1dim__);
      std::vector<double> mu2 =
        std::vector<double>(mu2_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 8;
      mu2 = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
              jacobian__>(0, lp__, mu2_1dim__);
      std::vector<double> mu3 =
        std::vector<double>(mu3_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 9;
      mu3 = in__.template read_constrain_lub<std::vector<local_scalar_t__>,
              jacobian__>(0, stan::math::max(x), lp__, mu3_1dim__);
      std::vector<double> lambda2 =
        std::vector<double>(lambda2_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 10;
      lambda2 = in__.template read_constrain_lb<
                  std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                  lambda2_1dim__);
      std::vector<double> lambda3 =
        std::vector<double>(lambda3_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 11;
      lambda3 = in__.template read_constrain_lb<
                  std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                  lambda3_1dim__);
      std::vector<double> lambda4 =
        std::vector<double>(lambda4_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 12;
      lambda4 = in__.template read_constrain_ub<
                  std::vector<local_scalar_t__>, jacobian__>(0.05, lp__,
                  lambda4_1dim__);
      double c = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 13;
      c = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
            1, lp__);
      Eigen::Matrix<double,-1,1> mu_rc =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> mu_rc_1 =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> mu_rc_2 =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> mu_rc_3 =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> mu_rc_4 =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> zero =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(alpha1);
      out__.write(alpha2);
      out__.write(alpha3);
      out__.write(a1);
      out__.write(a2);
      out__.write(a3);
      out__.write(a4);
      out__.write(mu2);
      out__.write(mu3);
      out__.write(lambda2);
      out__.write(lambda3);
      out__.write(lambda4);
      out__.write(c);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 22;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 20;
        stan::model::assign(zero, 0, "assigning variable zero",
          stan::model::index_uni(i));
      }
      current_statement__ = 23;
      stan::model::assign(mu_rc_1,
        (stan::math::logical_eq(pre_working_age, 1) ? stan::math::eval(
                                                        stan::math::multiply(
                                                          stan::model::rvalue(
                                                            a1, "a1",
                                                            stan::model::index_uni(
                                                              1)),
                                                          stan::math::exp(
                                                            stan::math::multiply(
                                                              -stan::model::rvalue(
                                                                 alpha1,
                                                                 "alpha1",
                                                                 stan::model::index_uni(
                                                                   1)), x)))) : 
        stan::math::eval(zero)), "assigning variable mu_rc_1");
      current_statement__ = 24;
      stan::model::assign(mu_rc_2,
        (stan::math::logical_eq(working_age, 1) ? stan::math::eval(
                                                    stan::math::multiply(
                                                      stan::model::rvalue(a2,
                                                        "a2",
                                                        stan::model::index_uni(
                                                          1)),
                                                      stan::math::exp(
                                                        stan::math::subtract(
                                                          stan::math::multiply(
                                                            -stan::model::rvalue(
                                                               alpha2,
                                                               "alpha2",
                                                               stan::model::index_uni(
                                                                 1)),
                                                            stan::math::subtract(
                                                              x,
                                                              stan::model::rvalue(
                                                                mu2, "mu2",
                                                                stan::model::index_uni(
                                                                  1)))),
                                                          stan::math::exp(
                                                            stan::math::multiply(
                                                              -stan::model::rvalue(
                                                                 lambda2,
                                                                 "lambda2",
                                                                 stan::model::index_uni(
                                                                   1)),
                                                              stan::math::subtract(
                                                                x,
                                                                stan::model::rvalue(
                                                                  mu2, "mu2",
                                                                  stan::model::index_uni(
                                                                    1))))))))) : 
        stan::math::eval(zero)), "assigning variable mu_rc_2");
      current_statement__ = 25;
      stan::model::assign(mu_rc_3,
        (stan::math::logical_eq(retirement, 1) ? stan::math::eval(
                                                   stan::math::multiply(
                                                     stan::model::rvalue(a3,
                                                       "a3",
                                                       stan::model::index_uni(
                                                         1)),
                                                     stan::math::exp(
                                                       stan::math::subtract(
                                                         stan::math::multiply(
                                                           -stan::model::rvalue(
                                                              alpha3,
                                                              "alpha3",
                                                              stan::model::index_uni(
                                                                1)),
                                                           stan::math::subtract(
                                                             x,
                                                             stan::model::rvalue(
                                                               mu3, "mu3",
                                                               stan::model::index_uni(
                                                                 1)))),
                                                         stan::math::exp(
                                                           stan::math::multiply(
                                                             -stan::model::rvalue(
                                                                lambda3,
                                                                "lambda3",
                                                                stan::model::index_uni(
                                                                  1)),
                                                             stan::math::subtract(
                                                               x,
                                                               stan::model::rvalue(
                                                                 mu3, "mu3",
                                                                 stan::model::index_uni(
                                                                   1))))))))) : 
        stan::math::eval(zero)), "assigning variable mu_rc_3");
      current_statement__ = 26;
      stan::model::assign(mu_rc_4,
        (stan::math::logical_eq(post_retirement, 1) ? stan::math::eval(
                                                        stan::math::multiply(
                                                          stan::model::rvalue(
                                                            a4, "a4",
                                                            stan::model::index_uni(
                                                              1)),
                                                          stan::math::exp(
                                                            stan::math::multiply(
                                                              stan::model::rvalue(
                                                                lambda4,
                                                                "lambda4",
                                                                stan::model::index_uni(
                                                                  1)), x)))) : 
        stan::math::eval(zero)), "assigning variable mu_rc_4");
      current_statement__ = 27;
      stan::model::assign(mu_rc,
        stan::math::add(
          stan::math::add(
            stan::math::add(stan::math::add(mu_rc_1, mu_rc_2), mu_rc_3),
            mu_rc_4), c), "assigning variable mu_rc");
      if (emit_transformed_parameters__) {
        out__.write(mu_rc);
        out__.write(mu_rc_1);
        out__.write(mu_rc_2);
        out__.write(mu_rc_3);
        out__.write(mu_rc_4);
        out__.write(zero);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<local_scalar_t__> alpha1 =
        std::vector<local_scalar_t__>(alpha1_1dim__, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(alpha1,
        in__.read<std::vector<local_scalar_t__>>(alpha1_1dim__),
        "assigning variable alpha1");
      out__.write_free_lb(0, alpha1);
      std::vector<local_scalar_t__> alpha2 =
        std::vector<local_scalar_t__>(alpha2_1dim__, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(alpha2,
        in__.read<std::vector<local_scalar_t__>>(alpha2_1dim__),
        "assigning variable alpha2");
      out__.write_free_lb(0, alpha2);
      std::vector<local_scalar_t__> alpha3 =
        std::vector<local_scalar_t__>(alpha3_1dim__, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(alpha3,
        in__.read<std::vector<local_scalar_t__>>(alpha3_1dim__),
        "assigning variable alpha3");
      out__.write_free_lb(0, alpha3);
      std::vector<local_scalar_t__> a1 =
        std::vector<local_scalar_t__>(a1_1dim__, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(a1,
        in__.read<std::vector<local_scalar_t__>>(a1_1dim__),
        "assigning variable a1");
      out__.write_free_lub(0, 1, a1);
      std::vector<local_scalar_t__> a2 =
        std::vector<local_scalar_t__>(a2_1dim__, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(a2,
        in__.read<std::vector<local_scalar_t__>>(a2_1dim__),
        "assigning variable a2");
      out__.write_free_lub(0, 1, a2);
      std::vector<local_scalar_t__> a3 =
        std::vector<local_scalar_t__>(a3_1dim__, DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(a3,
        in__.read<std::vector<local_scalar_t__>>(a3_1dim__),
        "assigning variable a3");
      out__.write_free_lub(0, 1, a3);
      std::vector<local_scalar_t__> a4 =
        std::vector<local_scalar_t__>(a4_1dim__, DUMMY_VAR__);
      current_statement__ = 7;
      stan::model::assign(a4,
        in__.read<std::vector<local_scalar_t__>>(a4_1dim__),
        "assigning variable a4");
      out__.write_free_lub(0, 1, a4);
      std::vector<local_scalar_t__> mu2 =
        std::vector<local_scalar_t__>(mu2_1dim__, DUMMY_VAR__);
      current_statement__ = 8;
      stan::model::assign(mu2,
        in__.read<std::vector<local_scalar_t__>>(mu2_1dim__),
        "assigning variable mu2");
      out__.write_free_lb(0, mu2);
      std::vector<local_scalar_t__> mu3 =
        std::vector<local_scalar_t__>(mu3_1dim__, DUMMY_VAR__);
      current_statement__ = 9;
      stan::model::assign(mu3,
        in__.read<std::vector<local_scalar_t__>>(mu3_1dim__),
        "assigning variable mu3");
      out__.write_free_lub(0, stan::math::max(x), mu3);
      std::vector<local_scalar_t__> lambda2 =
        std::vector<local_scalar_t__>(lambda2_1dim__, DUMMY_VAR__);
      current_statement__ = 10;
      stan::model::assign(lambda2,
        in__.read<std::vector<local_scalar_t__>>(lambda2_1dim__),
        "assigning variable lambda2");
      out__.write_free_lb(0, lambda2);
      std::vector<local_scalar_t__> lambda3 =
        std::vector<local_scalar_t__>(lambda3_1dim__, DUMMY_VAR__);
      current_statement__ = 11;
      stan::model::assign(lambda3,
        in__.read<std::vector<local_scalar_t__>>(lambda3_1dim__),
        "assigning variable lambda3");
      out__.write_free_lb(0, lambda3);
      std::vector<local_scalar_t__> lambda4 =
        std::vector<local_scalar_t__>(lambda4_1dim__, DUMMY_VAR__);
      current_statement__ = 12;
      stan::model::assign(lambda4,
        in__.read<std::vector<local_scalar_t__>>(lambda4_1dim__),
        "assigning variable lambda4");
      out__.write_free_ub(0.05, lambda4);
      local_scalar_t__ c = DUMMY_VAR__;
      current_statement__ = 13;
      c = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, c);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "alpha1", "double",
        std::vector<size_t>{static_cast<size_t>(alpha1_1dim__)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "alpha2", "double",
        std::vector<size_t>{static_cast<size_t>(alpha2_1dim__)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "alpha3", "double",
        std::vector<size_t>{static_cast<size_t>(alpha3_1dim__)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "a1", "double",
        std::vector<size_t>{static_cast<size_t>(a1_1dim__)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "a2", "double",
        std::vector<size_t>{static_cast<size_t>(a2_1dim__)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "a3", "double",
        std::vector<size_t>{static_cast<size_t>(a3_1dim__)});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "a4", "double",
        std::vector<size_t>{static_cast<size_t>(a4_1dim__)});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "mu2", "double",
        std::vector<size_t>{static_cast<size_t>(mu2_1dim__)});
      current_statement__ = 9;
      context__.validate_dims("parameter initialization", "mu3", "double",
        std::vector<size_t>{static_cast<size_t>(mu3_1dim__)});
      current_statement__ = 10;
      context__.validate_dims("parameter initialization", "lambda2",
        "double", std::vector<size_t>{static_cast<size_t>(lambda2_1dim__)});
      current_statement__ = 11;
      context__.validate_dims("parameter initialization", "lambda3",
        "double", std::vector<size_t>{static_cast<size_t>(lambda3_1dim__)});
      current_statement__ = 12;
      context__.validate_dims("parameter initialization", "lambda4",
        "double", std::vector<size_t>{static_cast<size_t>(lambda4_1dim__)});
      current_statement__ = 13;
      context__.validate_dims("parameter initialization", "c", "double",
        std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<local_scalar_t__> alpha1 =
        std::vector<local_scalar_t__>(alpha1_1dim__, DUMMY_VAR__);
      current_statement__ = 1;
      alpha1 = context__.vals_r("alpha1");
      out__.write_free_lb(0, alpha1);
      std::vector<local_scalar_t__> alpha2 =
        std::vector<local_scalar_t__>(alpha2_1dim__, DUMMY_VAR__);
      current_statement__ = 2;
      alpha2 = context__.vals_r("alpha2");
      out__.write_free_lb(0, alpha2);
      std::vector<local_scalar_t__> alpha3 =
        std::vector<local_scalar_t__>(alpha3_1dim__, DUMMY_VAR__);
      current_statement__ = 3;
      alpha3 = context__.vals_r("alpha3");
      out__.write_free_lb(0, alpha3);
      std::vector<local_scalar_t__> a1 =
        std::vector<local_scalar_t__>(a1_1dim__, DUMMY_VAR__);
      current_statement__ = 4;
      a1 = context__.vals_r("a1");
      out__.write_free_lub(0, 1, a1);
      std::vector<local_scalar_t__> a2 =
        std::vector<local_scalar_t__>(a2_1dim__, DUMMY_VAR__);
      current_statement__ = 5;
      a2 = context__.vals_r("a2");
      out__.write_free_lub(0, 1, a2);
      std::vector<local_scalar_t__> a3 =
        std::vector<local_scalar_t__>(a3_1dim__, DUMMY_VAR__);
      current_statement__ = 6;
      a3 = context__.vals_r("a3");
      out__.write_free_lub(0, 1, a3);
      std::vector<local_scalar_t__> a4 =
        std::vector<local_scalar_t__>(a4_1dim__, DUMMY_VAR__);
      current_statement__ = 7;
      a4 = context__.vals_r("a4");
      out__.write_free_lub(0, 1, a4);
      std::vector<local_scalar_t__> mu2 =
        std::vector<local_scalar_t__>(mu2_1dim__, DUMMY_VAR__);
      current_statement__ = 8;
      mu2 = context__.vals_r("mu2");
      out__.write_free_lb(0, mu2);
      std::vector<local_scalar_t__> mu3 =
        std::vector<local_scalar_t__>(mu3_1dim__, DUMMY_VAR__);
      current_statement__ = 9;
      mu3 = context__.vals_r("mu3");
      out__.write_free_lub(0, stan::math::max(x), mu3);
      std::vector<local_scalar_t__> lambda2 =
        std::vector<local_scalar_t__>(lambda2_1dim__, DUMMY_VAR__);
      current_statement__ = 10;
      lambda2 = context__.vals_r("lambda2");
      out__.write_free_lb(0, lambda2);
      std::vector<local_scalar_t__> lambda3 =
        std::vector<local_scalar_t__>(lambda3_1dim__, DUMMY_VAR__);
      current_statement__ = 11;
      lambda3 = context__.vals_r("lambda3");
      out__.write_free_lb(0, lambda3);
      std::vector<local_scalar_t__> lambda4 =
        std::vector<local_scalar_t__>(lambda4_1dim__, DUMMY_VAR__);
      current_statement__ = 12;
      lambda4 = context__.vals_r("lambda4");
      out__.write_free_ub(0.05, lambda4);
      local_scalar_t__ c = DUMMY_VAR__;
      current_statement__ = 13;
      c = context__.vals_r("c")[(1 - 1)];
      out__.write_free_lub(0, 1, c);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"alpha1", "alpha2", "alpha3", "a1",
                "a2", "a3", "a4", "mu2", "mu3", "lambda2", "lambda3",
                "lambda4", "c"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"mu_rc", "mu_rc_1", "mu_rc_2", "mu_rc_3", "mu_rc_4", "zero"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    alpha1_1dim__)},
                std::vector<size_t>{static_cast<size_t>(alpha2_1dim__)},
                std::vector<size_t>{static_cast<size_t>(alpha3_1dim__)},
                std::vector<size_t>{static_cast<size_t>(a1_1dim__)},
                std::vector<size_t>{static_cast<size_t>(a2_1dim__)},
                std::vector<size_t>{static_cast<size_t>(a3_1dim__)},
                std::vector<size_t>{static_cast<size_t>(a4_1dim__)},
                std::vector<size_t>{static_cast<size_t>(mu2_1dim__)},
                std::vector<size_t>{static_cast<size_t>(mu3_1dim__)},
                std::vector<size_t>{static_cast<size_t>(lambda2_1dim__)},
                std::vector<size_t>{static_cast<size_t>(lambda3_1dim__)},
                std::vector<size_t>{static_cast<size_t>(lambda4_1dim__)},
                std::vector<size_t>{}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= alpha1_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha1" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= alpha2_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha2" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= alpha3_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha3" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= a1_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "a1" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= a2_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "a2" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= a3_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "a3" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= a4_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "a4" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= mu2_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu2" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= mu3_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu3" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= lambda2_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "lambda2" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= lambda3_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "lambda3" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= lambda4_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "lambda4" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "c");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu_rc" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu_rc_1" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu_rc_2" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu_rc_3" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu_rc_4" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "zero" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= alpha1_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha1" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= alpha2_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha2" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= alpha3_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha3" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= a1_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "a1" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= a2_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "a2" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= a3_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "a3" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= a4_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "a4" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= mu2_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu2" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= mu3_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu3" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= lambda2_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "lambda2" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= lambda3_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "lambda3" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= lambda4_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "lambda4" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "c");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu_rc" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu_rc_1" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu_rc_2" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu_rc_3" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu_rc_4" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "zero" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"alpha1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(alpha1_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"alpha2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(alpha2_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"alpha3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(alpha3_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"a1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(a1_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"a2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(a2_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"a3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(a3_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"a4\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(a4_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"mu2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(mu2_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"mu3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(mu3_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"lambda2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(lambda2_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"lambda3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(lambda3_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"lambda4\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(lambda4_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"c\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_rc\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mu_rc_1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mu_rc_2\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mu_rc_3\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mu_rc_4\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"zero\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"alpha1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(alpha1_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"alpha2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(alpha2_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"alpha3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(alpha3_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"a1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(a1_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"a2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(a2_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"a3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(a3_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"a4\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(a4_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"mu2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(mu2_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"mu3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(mu3_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"lambda2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(lambda2_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"lambda3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(lambda3_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"lambda4\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(lambda4_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"c\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_rc\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mu_rc_1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mu_rc_2\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mu_rc_3\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mu_rc_4\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"zero\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((((((alpha1_1dim__ + alpha2_1dim__) +
      alpha3_1dim__) + a1_1dim__) + a2_1dim__) + a3_1dim__) + a4_1dim__) +
      mu2_1dim__) + mu3_1dim__) + lambda2_1dim__) + lambda3_1dim__) +
      lambda4_1dim__) + 1);
    const size_t num_transformed = emit_transformed_parameters * ((((((N + N)
      + N) + N) + N) + N));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((((((alpha1_1dim__ + alpha2_1dim__) +
      alpha3_1dim__) + a1_1dim__) + a2_1dim__) + a3_1dim__) + a4_1dim__) +
      mu2_1dim__) + mu3_1dim__) + lambda2_1dim__) + lambda3_1dim__) +
      lambda4_1dim__) + 1);
    const size_t num_transformed = emit_transformed_parameters * ((((((N + N)
      + N) + N) + N) + N));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_rcmodel_normal_sigma_given_namespace::model_rcmodel_normal_sigma_given;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_rcmodel_normal_sigma_given_namespace::profiles__;
}
#endif
#endif
