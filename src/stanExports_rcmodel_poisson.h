// Generated by rstantools.  Do not edit by hand.

/*
    rcbayes is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rcbayes is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rcbayes.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_rcmodel_poisson_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'rcmodel_poisson', line 12, column 2 to column 48)",
                                                      " (in 'rcmodel_poisson', line 13, column 2 to column 44)",
                                                      " (in 'rcmodel_poisson', line 14, column 2 to column 43)",
                                                      " (in 'rcmodel_poisson', line 15, column 2 to column 53)",
                                                      " (in 'rcmodel_poisson', line 16, column 2 to column 49)",
                                                      " (in 'rcmodel_poisson', line 17, column 2 to column 48)",
                                                      " (in 'rcmodel_poisson', line 18, column 2 to column 53)",
                                                      " (in 'rcmodel_poisson', line 19, column 2 to column 41)",
                                                      " (in 'rcmodel_poisson', line 20, column 2 to column 54)",
                                                      " (in 'rcmodel_poisson', line 21, column 2 to column 45)",
                                                      " (in 'rcmodel_poisson', line 22, column 2 to column 44)",
                                                      " (in 'rcmodel_poisson', line 23, column 2 to column 52)",
                                                      " (in 'rcmodel_poisson', line 24, column 2 to column 27)",
                                                      " (in 'rcmodel_poisson', line 27, column 2 to column 18)",
                                                      " (in 'rcmodel_poisson', line 28, column 2 to column 20)",
                                                      " (in 'rcmodel_poisson', line 29, column 2 to column 20)",
                                                      " (in 'rcmodel_poisson', line 30, column 2 to column 20)",
                                                      " (in 'rcmodel_poisson', line 31, column 2 to column 20)",
                                                      " (in 'rcmodel_poisson', line 32, column 2 to column 17)",
                                                      " (in 'rcmodel_poisson', line 34, column 4 to column 16)",
                                                      " (in 'rcmodel_poisson', line 33, column 15 to line 35, column 3)",
                                                      " (in 'rcmodel_poisson', line 33, column 2 to line 35, column 3)",
                                                      " (in 'rcmodel_poisson', line 36, column 2 to column 60)",
                                                      " (in 'rcmodel_poisson', line 37, column 2 to column 99)",
                                                      " (in 'rcmodel_poisson', line 38, column 2 to column 98)",
                                                      " (in 'rcmodel_poisson', line 39, column 2 to column 62)",
                                                      " (in 'rcmodel_poisson', line 40, column 2 to column 52)",
                                                      " (in 'rcmodel_poisson', line 44, column 9 to column 10)",
                                                      " (in 'rcmodel_poisson', line 44, column 2 to column 23)",
                                                      " (in 'rcmodel_poisson', line 46, column 4 to column 38)",
                                                      " (in 'rcmodel_poisson', line 45, column 16 to line 47, column 3)",
                                                      " (in 'rcmodel_poisson', line 45, column 2 to line 47, column 3)",
                                                      " (in 'rcmodel_poisson', line 48, column 2 to column 28)",
                                                      " (in 'rcmodel_poisson', line 51, column 4 to column 25)",
                                                      " (in 'rcmodel_poisson', line 52, column 4 to column 23)",
                                                      " (in 'rcmodel_poisson', line 50, column 24 to line 53, column 3)",
                                                      " (in 'rcmodel_poisson', line 50, column 2 to line 53, column 3)",
                                                      " (in 'rcmodel_poisson', line 55, column 4 to column 25)",
                                                      " (in 'rcmodel_poisson', line 56, column 4 to column 23)",
                                                      " (in 'rcmodel_poisson', line 57, column 4 to column 23)",
                                                      " (in 'rcmodel_poisson', line 58, column 4 to column 26)",
                                                      " (in 'rcmodel_poisson', line 54, column 20 to line 59, column 3)",
                                                      " (in 'rcmodel_poisson', line 54, column 2 to line 59, column 3)",
                                                      " (in 'rcmodel_poisson', line 61, column 4 to column 25)",
                                                      " (in 'rcmodel_poisson', line 62, column 4 to column 23)",
                                                      " (in 'rcmodel_poisson', line 63, column 4 to column 23)",
                                                      " (in 'rcmodel_poisson', line 64, column 4 to column 26)",
                                                      " (in 'rcmodel_poisson', line 60, column 19 to line 65, column 3)",
                                                      " (in 'rcmodel_poisson', line 60, column 2 to line 65, column 3)",
                                                      " (in 'rcmodel_poisson', line 67, column 4 to column 24)",
                                                      " (in 'rcmodel_poisson', line 68, column 4 to column 29)",
                                                      " (in 'rcmodel_poisson', line 66, column 24 to line 69, column 3)",
                                                      " (in 'rcmodel_poisson', line 66, column 2 to line 69, column 3)",
                                                      " (in 'rcmodel_poisson', line 70, column 2 to column 43)",
                                                      " (in 'rcmodel_poisson', line 2, column 2 to column 39)",
                                                      " (in 'rcmodel_poisson', line 3, column 2 to column 35)",
                                                      " (in 'rcmodel_poisson', line 4, column 2 to column 34)",
                                                      " (in 'rcmodel_poisson', line 5, column 2 to column 39)",
                                                      " (in 'rcmodel_poisson', line 6, column 2 to column 17)",
                                                      " (in 'rcmodel_poisson', line 7, column 9 to column 10)",
                                                      " (in 'rcmodel_poisson', line 7, column 2 to column 14)",
                                                      " (in 'rcmodel_poisson', line 8, column 8 to column 9)",
                                                      " (in 'rcmodel_poisson', line 8, column 2 to column 26)",
                                                      " (in 'rcmodel_poisson', line 9, column 9 to column 10)",
                                                      " (in 'rcmodel_poisson', line 9, column 2 to column 16)",
                                                      " (in 'rcmodel_poisson', line 12, column 8 to column 25)",
                                                      " (in 'rcmodel_poisson', line 13, column 8 to column 21)",
                                                      " (in 'rcmodel_poisson', line 14, column 8 to column 20)",
                                                      " (in 'rcmodel_poisson', line 15, column 8 to column 25)",
                                                      " (in 'rcmodel_poisson', line 16, column 8 to column 21)",
                                                      " (in 'rcmodel_poisson', line 17, column 8 to column 20)",
                                                      " (in 'rcmodel_poisson', line 18, column 8 to column 25)",
                                                      " (in 'rcmodel_poisson', line 19, column 8 to column 21)",
                                                      " (in 'rcmodel_poisson', line 20, column 8 to column 20)",
                                                      " (in 'rcmodel_poisson', line 21, column 8 to column 21)",
                                                      " (in 'rcmodel_poisson', line 22, column 8 to column 20)",
                                                      " (in 'rcmodel_poisson', line 23, column 8 to column 25)",
                                                      " (in 'rcmodel_poisson', line 27, column 9 to column 10)",
                                                      " (in 'rcmodel_poisson', line 28, column 9 to column 10)",
                                                      " (in 'rcmodel_poisson', line 29, column 9 to column 10)",
                                                      " (in 'rcmodel_poisson', line 30, column 9 to column 10)",
                                                      " (in 'rcmodel_poisson', line 31, column 9 to column 10)",
                                                      " (in 'rcmodel_poisson', line 32, column 9 to column 10)"};
#include <stan_meta_header.hpp>
class model_rcmodel_poisson final : public model_base_crtp<model_rcmodel_poisson> {
private:
  int pre_working_age;
  int working_age;
  int retirement;
  int post_retirement;
  int N;
  Eigen::Matrix<double, -1, 1> x;
  std::vector<int> y;
  Eigen::Matrix<double, -1, 1> pop;
  int alpha1_1dim__;
  int alpha2_1dim__;
  int alpha3_1dim__;
  int a1_1dim__;
  int a2_1dim__;
  int a3_1dim__;
  int a4_1dim__;
  int mu2_1dim__;
  int mu3_1dim__;
  int lambda2_1dim__;
  int lambda3_1dim__;
  int lambda4_1dim__;
 
public:
  ~model_rcmodel_poisson() { }
  
  inline std::string model_name() const final { return "model_rcmodel_poisson"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_rcmodel_poisson(stan::io::var_context& context__,
                        unsigned int random_seed__ = 0,
                        std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_rcmodel_poisson_namespace::model_rcmodel_poisson";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 55;
      context__.validate_dims("data initialization","pre_working_age","int",
          context__.to_vec());
      pre_working_age = std::numeric_limits<int>::min();
      
      current_statement__ = 55;
      pre_working_age = context__.vals_i("pre_working_age")[(1 - 1)];
      current_statement__ = 55;
      current_statement__ = 55;
      check_greater_or_equal(function__, "pre_working_age", pre_working_age,
                             0);
      current_statement__ = 55;
      current_statement__ = 55;
      check_less_or_equal(function__, "pre_working_age", pre_working_age, 1);
      current_statement__ = 56;
      context__.validate_dims("data initialization","working_age","int",
          context__.to_vec());
      working_age = std::numeric_limits<int>::min();
      
      current_statement__ = 56;
      working_age = context__.vals_i("working_age")[(1 - 1)];
      current_statement__ = 56;
      current_statement__ = 56;
      check_greater_or_equal(function__, "working_age", working_age, 0);
      current_statement__ = 56;
      current_statement__ = 56;
      check_less_or_equal(function__, "working_age", working_age, 1);
      current_statement__ = 57;
      context__.validate_dims("data initialization","retirement","int",
          context__.to_vec());
      retirement = std::numeric_limits<int>::min();
      
      current_statement__ = 57;
      retirement = context__.vals_i("retirement")[(1 - 1)];
      current_statement__ = 57;
      current_statement__ = 57;
      check_greater_or_equal(function__, "retirement", retirement, 0);
      current_statement__ = 57;
      current_statement__ = 57;
      check_less_or_equal(function__, "retirement", retirement, 1);
      current_statement__ = 58;
      context__.validate_dims("data initialization","post_retirement","int",
          context__.to_vec());
      post_retirement = std::numeric_limits<int>::min();
      
      current_statement__ = 58;
      post_retirement = context__.vals_i("post_retirement")[(1 - 1)];
      current_statement__ = 58;
      current_statement__ = 58;
      check_greater_or_equal(function__, "post_retirement", post_retirement,
                             0);
      current_statement__ = 58;
      current_statement__ = 58;
      check_less_or_equal(function__, "post_retirement", post_retirement, 1);
      current_statement__ = 59;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 59;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 59;
      current_statement__ = 59;
      check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 60;
      validate_non_negative_index("x", "N", N);
      current_statement__ = 61;
      context__.validate_dims("data initialization","x","double",
          context__.to_vec(N));
      x = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(x, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> x_flat__;
        current_statement__ = 61;
        assign(x_flat__, nil_index_list(), context__.vals_r("x"),
          "assigning variable x_flat__");
        current_statement__ = 61;
        pos__ = 1;
        current_statement__ = 61;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 61;
          assign(x, cons_list(index_uni(sym1__), nil_index_list()),
            x_flat__[(pos__ - 1)], "assigning variable x");
          current_statement__ = 61;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 62;
      validate_non_negative_index("y", "N", N);
      current_statement__ = 63;
      context__.validate_dims("data initialization","y","int",
          context__.to_vec(N));
      y = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 63;
      assign(y, nil_index_list(), context__.vals_i("y"),
        "assigning variable y");
      current_statement__ = 63;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 63;
        current_statement__ = 63;
        check_greater_or_equal(function__, "y[sym1__]", y[(sym1__ - 1)], 0);}
      current_statement__ = 64;
      validate_non_negative_index("pop", "N", N);
      current_statement__ = 65;
      context__.validate_dims("data initialization","pop","double",
          context__.to_vec(N));
      pop = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(pop, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> pop_flat__;
        current_statement__ = 65;
        assign(pop_flat__, nil_index_list(), context__.vals_r("pop"),
          "assigning variable pop_flat__");
        current_statement__ = 65;
        pos__ = 1;
        current_statement__ = 65;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 65;
          assign(pop, cons_list(index_uni(sym1__), nil_index_list()),
            pop_flat__[(pos__ - 1)], "assigning variable pop");
          current_statement__ = 65;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 66;
      alpha1_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 66;
      alpha1_1dim__ = (1 * pre_working_age);
      current_statement__ = 66;
      validate_non_negative_index("alpha1", "1 * pre_working_age",
                                  alpha1_1dim__);
      current_statement__ = 67;
      alpha2_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 67;
      alpha2_1dim__ = (1 * working_age);
      current_statement__ = 67;
      validate_non_negative_index("alpha2", "1 * working_age", alpha2_1dim__);
      current_statement__ = 68;
      alpha3_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 68;
      alpha3_1dim__ = (1 * retirement);
      current_statement__ = 68;
      validate_non_negative_index("alpha3", "1 * retirement", alpha3_1dim__);
      current_statement__ = 69;
      a1_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 69;
      a1_1dim__ = (1 * pre_working_age);
      current_statement__ = 69;
      validate_non_negative_index("a1", "1 * pre_working_age", a1_1dim__);
      current_statement__ = 70;
      a2_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 70;
      a2_1dim__ = (1 * working_age);
      current_statement__ = 70;
      validate_non_negative_index("a2", "1 * working_age", a2_1dim__);
      current_statement__ = 71;
      a3_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 71;
      a3_1dim__ = (1 * retirement);
      current_statement__ = 71;
      validate_non_negative_index("a3", "1 * retirement", a3_1dim__);
      current_statement__ = 72;
      a4_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 72;
      a4_1dim__ = (1 * post_retirement);
      current_statement__ = 72;
      validate_non_negative_index("a4", "1 * post_retirement", a4_1dim__);
      current_statement__ = 73;
      mu2_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 73;
      mu2_1dim__ = (1 * working_age);
      current_statement__ = 73;
      validate_non_negative_index("mu2", "1 * working_age", mu2_1dim__);
      current_statement__ = 74;
      mu3_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 74;
      mu3_1dim__ = (1 * retirement);
      current_statement__ = 74;
      validate_non_negative_index("mu3", "1 * retirement", mu3_1dim__);
      current_statement__ = 75;
      lambda2_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 75;
      lambda2_1dim__ = (1 * working_age);
      current_statement__ = 75;
      validate_non_negative_index("lambda2", "1 * working_age",
                                  lambda2_1dim__);
      current_statement__ = 76;
      lambda3_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 76;
      lambda3_1dim__ = (1 * retirement);
      current_statement__ = 76;
      validate_non_negative_index("lambda3", "1 * retirement", lambda3_1dim__);
      current_statement__ = 77;
      lambda4_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 77;
      lambda4_1dim__ = (1 * post_retirement);
      current_statement__ = 77;
      validate_non_negative_index("lambda4", "1 * post_retirement",
                                  lambda4_1dim__);
      current_statement__ = 78;
      validate_non_negative_index("mu_rc", "N", N);
      current_statement__ = 79;
      validate_non_negative_index("mu_rc_1", "N", N);
      current_statement__ = 80;
      validate_non_negative_index("mu_rc_2", "N", N);
      current_statement__ = 81;
      validate_non_negative_index("mu_rc_3", "N", N);
      current_statement__ = 82;
      validate_non_negative_index("mu_rc_4", "N", N);
      current_statement__ = 83;
      validate_non_negative_index("zero", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += alpha1_1dim__;
      num_params_r__ += alpha2_1dim__;
      num_params_r__ += alpha3_1dim__;
      num_params_r__ += a1_1dim__;
      num_params_r__ += a2_1dim__;
      num_params_r__ += a3_1dim__;
      num_params_r__ += a4_1dim__;
      num_params_r__ += mu2_1dim__;
      num_params_r__ += mu3_1dim__;
      num_params_r__ += lambda2_1dim__;
      num_params_r__ += lambda3_1dim__;
      num_params_r__ += lambda4_1dim__;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_rcmodel_poisson_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      std::vector<local_scalar_t__> alpha1;
      alpha1 = std::vector<local_scalar_t__>(alpha1_1dim__, DUMMY_VAR__);
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= alpha1_1dim__; ++sym1__) {
        current_statement__ = 1;
        assign(alpha1, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable alpha1");}
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= alpha1_1dim__; ++sym1__) {
        current_statement__ = 1;
        if (jacobian__) {
          current_statement__ = 1;
          assign(alpha1, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(alpha1[(sym1__ - 1)], 0, lp__),
            "assigning variable alpha1");
        } else {
          current_statement__ = 1;
          assign(alpha1, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(alpha1[(sym1__ - 1)], 0),
            "assigning variable alpha1");
        }}
      std::vector<local_scalar_t__> alpha2;
      alpha2 = std::vector<local_scalar_t__>(alpha2_1dim__, DUMMY_VAR__);
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= alpha2_1dim__; ++sym1__) {
        current_statement__ = 2;
        assign(alpha2, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable alpha2");}
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= alpha2_1dim__; ++sym1__) {
        current_statement__ = 2;
        if (jacobian__) {
          current_statement__ = 2;
          assign(alpha2, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(alpha2[(sym1__ - 1)], 0, lp__),
            "assigning variable alpha2");
        } else {
          current_statement__ = 2;
          assign(alpha2, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(alpha2[(sym1__ - 1)], 0),
            "assigning variable alpha2");
        }}
      std::vector<local_scalar_t__> alpha3;
      alpha3 = std::vector<local_scalar_t__>(alpha3_1dim__, DUMMY_VAR__);
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= alpha3_1dim__; ++sym1__) {
        current_statement__ = 3;
        assign(alpha3, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable alpha3");}
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= alpha3_1dim__; ++sym1__) {
        current_statement__ = 3;
        if (jacobian__) {
          current_statement__ = 3;
          assign(alpha3, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(alpha3[(sym1__ - 1)], 0, lp__),
            "assigning variable alpha3");
        } else {
          current_statement__ = 3;
          assign(alpha3, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(alpha3[(sym1__ - 1)], 0),
            "assigning variable alpha3");
        }}
      std::vector<local_scalar_t__> a1;
      a1 = std::vector<local_scalar_t__>(a1_1dim__, DUMMY_VAR__);
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= a1_1dim__; ++sym1__) {
        current_statement__ = 4;
        assign(a1, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable a1");}
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= a1_1dim__; ++sym1__) {
        current_statement__ = 4;
        if (jacobian__) {
          current_statement__ = 4;
          assign(a1, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(a1[(sym1__ - 1)], 0, 1, lp__),
            "assigning variable a1");
        } else {
          current_statement__ = 4;
          assign(a1, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(a1[(sym1__ - 1)], 0, 1),
            "assigning variable a1");
        }}
      std::vector<local_scalar_t__> a2;
      a2 = std::vector<local_scalar_t__>(a2_1dim__, DUMMY_VAR__);
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= a2_1dim__; ++sym1__) {
        current_statement__ = 5;
        assign(a2, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable a2");}
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= a2_1dim__; ++sym1__) {
        current_statement__ = 5;
        if (jacobian__) {
          current_statement__ = 5;
          assign(a2, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(a2[(sym1__ - 1)], 0, 1, lp__),
            "assigning variable a2");
        } else {
          current_statement__ = 5;
          assign(a2, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(a2[(sym1__ - 1)], 0, 1),
            "assigning variable a2");
        }}
      std::vector<local_scalar_t__> a3;
      a3 = std::vector<local_scalar_t__>(a3_1dim__, DUMMY_VAR__);
      
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= a3_1dim__; ++sym1__) {
        current_statement__ = 6;
        assign(a3, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable a3");}
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= a3_1dim__; ++sym1__) {
        current_statement__ = 6;
        if (jacobian__) {
          current_statement__ = 6;
          assign(a3, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(a3[(sym1__ - 1)], 0, 1, lp__),
            "assigning variable a3");
        } else {
          current_statement__ = 6;
          assign(a3, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(a3[(sym1__ - 1)], 0, 1),
            "assigning variable a3");
        }}
      std::vector<local_scalar_t__> a4;
      a4 = std::vector<local_scalar_t__>(a4_1dim__, DUMMY_VAR__);
      
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= a4_1dim__; ++sym1__) {
        current_statement__ = 7;
        assign(a4, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable a4");}
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= a4_1dim__; ++sym1__) {
        current_statement__ = 7;
        if (jacobian__) {
          current_statement__ = 7;
          assign(a4, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(a4[(sym1__ - 1)], 0, 1, lp__),
            "assigning variable a4");
        } else {
          current_statement__ = 7;
          assign(a4, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(a4[(sym1__ - 1)], 0, 1),
            "assigning variable a4");
        }}
      std::vector<local_scalar_t__> mu2;
      mu2 = std::vector<local_scalar_t__>(mu2_1dim__, DUMMY_VAR__);
      
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= mu2_1dim__; ++sym1__) {
        current_statement__ = 8;
        assign(mu2, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable mu2");}
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= mu2_1dim__; ++sym1__) {
        current_statement__ = 8;
        if (jacobian__) {
          current_statement__ = 8;
          assign(mu2, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(mu2[(sym1__ - 1)], 0, lp__),
            "assigning variable mu2");
        } else {
          current_statement__ = 8;
          assign(mu2, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(mu2[(sym1__ - 1)], 0),
            "assigning variable mu2");
        }}
      std::vector<local_scalar_t__> mu3;
      mu3 = std::vector<local_scalar_t__>(mu3_1dim__, DUMMY_VAR__);
      
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= mu3_1dim__; ++sym1__) {
        current_statement__ = 9;
        assign(mu3, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable mu3");}
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= mu3_1dim__; ++sym1__) {
        current_statement__ = 9;
        if (jacobian__) {
          current_statement__ = 9;
          assign(mu3, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(mu3[(sym1__ - 1)], 0, max(x), lp__),
            "assigning variable mu3");
        } else {
          current_statement__ = 9;
          assign(mu3, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(mu3[(sym1__ - 1)], 0, max(x)),
            "assigning variable mu3");
        }}
      std::vector<local_scalar_t__> lambda2;
      lambda2 = std::vector<local_scalar_t__>(lambda2_1dim__, DUMMY_VAR__);
      
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= lambda2_1dim__; ++sym1__) {
        current_statement__ = 10;
        assign(lambda2, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable lambda2");}
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= lambda2_1dim__; ++sym1__) {
        current_statement__ = 10;
        if (jacobian__) {
          current_statement__ = 10;
          assign(lambda2, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(lambda2[(sym1__ - 1)], 0, lp__),
            "assigning variable lambda2");
        } else {
          current_statement__ = 10;
          assign(lambda2, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(lambda2[(sym1__ - 1)], 0),
            "assigning variable lambda2");
        }}
      std::vector<local_scalar_t__> lambda3;
      lambda3 = std::vector<local_scalar_t__>(lambda3_1dim__, DUMMY_VAR__);
      
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= lambda3_1dim__; ++sym1__) {
        current_statement__ = 11;
        assign(lambda3, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable lambda3");}
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= lambda3_1dim__; ++sym1__) {
        current_statement__ = 11;
        if (jacobian__) {
          current_statement__ = 11;
          assign(lambda3, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(lambda3[(sym1__ - 1)], 0, lp__),
            "assigning variable lambda3");
        } else {
          current_statement__ = 11;
          assign(lambda3, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(lambda3[(sym1__ - 1)], 0),
            "assigning variable lambda3");
        }}
      std::vector<local_scalar_t__> lambda4;
      lambda4 = std::vector<local_scalar_t__>(lambda4_1dim__, DUMMY_VAR__);
      
      current_statement__ = 12;
      for (int sym1__ = 1; sym1__ <= lambda4_1dim__; ++sym1__) {
        current_statement__ = 12;
        assign(lambda4, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable lambda4");}
      current_statement__ = 12;
      for (int sym1__ = 1; sym1__ <= lambda4_1dim__; ++sym1__) {
        current_statement__ = 12;
        if (jacobian__) {
          current_statement__ = 12;
          assign(lambda4, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::ub_constrain(lambda4[(sym1__ - 1)], 0.05, lp__),
            "assigning variable lambda4");
        } else {
          current_statement__ = 12;
          assign(lambda4, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::ub_constrain(lambda4[(sym1__ - 1)], 0.05),
            "assigning variable lambda4");
        }}
      local_scalar_t__ c;
      c = DUMMY_VAR__;
      
      current_statement__ = 13;
      c = in__.scalar();
      current_statement__ = 13;
      if (jacobian__) {
        current_statement__ = 13;
        c = stan::math::lub_constrain(c, 0, 1, lp__);
      } else {
        current_statement__ = 13;
        c = stan::math::lub_constrain(c, 0, 1);
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> mu_rc;
      mu_rc = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(mu_rc, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> mu_rc_1;
      mu_rc_1 = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(mu_rc_1, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> mu_rc_2;
      mu_rc_2 = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(mu_rc_2, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> mu_rc_3;
      mu_rc_3 = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(mu_rc_3, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> mu_rc_4;
      mu_rc_4 = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(mu_rc_4, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> zero;
      zero = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(zero, DUMMY_VAR__);
      
      current_statement__ = 22;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 20;
        assign(zero, cons_list(index_uni(i), nil_index_list()), 0,
          "assigning variable zero");}
      current_statement__ = 23;
      assign(mu_rc_1, nil_index_list(),
        (logical_eq(pre_working_age, 1) ?
           stan::math::eval(multiply(a1[(1 - 1)],
                              stan::math::exp(multiply(-alpha1[(1 - 1)], x))))
           : stan::math::eval(zero)), "assigning variable mu_rc_1");
      current_statement__ = 24;
      assign(mu_rc_2, nil_index_list(),
        (logical_eq(working_age, 1) ?
           stan::math::eval(multiply(a2[(1 - 1)],
                              stan::math::exp(
                                subtract(
                                  multiply(-alpha2[(1 - 1)],
                                    subtract(x, mu2[(1 - 1)])),
                                  stan::math::exp(
                                    multiply(-lambda2[(1 - 1)],
                                      subtract(x, mu2[(1 - 1)]))))))) :
           stan::math::eval(zero)), "assigning variable mu_rc_2");
      current_statement__ = 25;
      assign(mu_rc_3, nil_index_list(),
        (logical_eq(retirement, 1) ?
           stan::math::eval(multiply(a3[(1 - 1)],
                              stan::math::exp(
                                subtract(
                                  multiply(-alpha3[(1 - 1)],
                                    subtract(x, mu3[(1 - 1)])),
                                  stan::math::exp(
                                    multiply(-lambda3[(1 - 1)],
                                      subtract(x, mu3[(1 - 1)]))))))) :
           stan::math::eval(zero)), "assigning variable mu_rc_3");
      current_statement__ = 26;
      assign(mu_rc_4, nil_index_list(),
        (logical_eq(post_retirement, 1) ?
           stan::math::eval(multiply(a4[(1 - 1)],
                              stan::math::exp(multiply(lambda4[(1 - 1)], x))))
           : stan::math::eval(zero)), "assigning variable mu_rc_4");
      current_statement__ = 27;
      assign(mu_rc, nil_index_list(),
        add(add(add(add(mu_rc_1, mu_rc_2), mu_rc_3), mu_rc_4), c),
        "assigning variable mu_rc");
      {
        current_statement__ = 28;
        validate_non_negative_index("log_lambda", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, 1> log_lambda;
        log_lambda = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
        stan::math::fill(log_lambda, DUMMY_VAR__);
        
        current_statement__ = 32;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 30;
          assign(log_lambda, cons_list(index_uni(i), nil_index_list()),
            (mu_rc[(i - 1)] + pop[(i - 1)]), "assigning variable log_lambda");
        }
        current_statement__ = 33;
        lp_accum__.add(poisson_lpmf<propto__>(y, elt_multiply(mu_rc, pop)));
        current_statement__ = 37;
        if (logical_eq(pre_working_age, 1)) {
          current_statement__ = 34;
          lp_accum__.add(normal_lpdf<propto__>(alpha1, 0, 1));
          current_statement__ = 35;
          lp_accum__.add(normal_lpdf<propto__>(a1, 0, 0.1));
        } 
        current_statement__ = 43;
        if (logical_eq(working_age, 1)) {
          current_statement__ = 38;
          lp_accum__.add(normal_lpdf<propto__>(alpha2, 0, 1));
          current_statement__ = 39;
          lp_accum__.add(normal_lpdf<propto__>(a2, 0, 0.1));
          current_statement__ = 40;
          lp_accum__.add(normal_lpdf<propto__>(mu2, 25, 1));
          current_statement__ = 41;
          lp_accum__.add(normal_lpdf<propto__>(lambda2, 0, 1));
        } 
        current_statement__ = 49;
        if (logical_eq(retirement, 1)) {
          current_statement__ = 44;
          lp_accum__.add(normal_lpdf<propto__>(alpha3, 0, 1));
          current_statement__ = 45;
          lp_accum__.add(normal_lpdf<propto__>(a3, 0, 0.1));
          current_statement__ = 46;
          lp_accum__.add(normal_lpdf<propto__>(mu3, 65, 1));
          current_statement__ = 47;
          lp_accum__.add(normal_lpdf<propto__>(lambda3, 0, 1));
        } 
        current_statement__ = 53;
        if (logical_eq(post_retirement, 1)) {
          current_statement__ = 50;
          lp_accum__.add(normal_lpdf<propto__>(a4, 0, 0.05));
          current_statement__ = 51;
          lp_accum__.add(normal_lpdf<propto__>(lambda4, 0, 0.01));
        } 
        current_statement__ = 54;
        lp_accum__.add(
          normal_lpdf<propto__>(c, min(elt_divide(to_vector(y), pop)), 0.1));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_rcmodel_poisson_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      std::vector<double> alpha1;
      alpha1 = std::vector<double>(alpha1_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= alpha1_1dim__; ++sym1__) {
        current_statement__ = 1;
        assign(alpha1, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable alpha1");}
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= alpha1_1dim__; ++sym1__) {
        current_statement__ = 1;
        assign(alpha1, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(alpha1[(sym1__ - 1)], 0),
          "assigning variable alpha1");}
      std::vector<double> alpha2;
      alpha2 = std::vector<double>(alpha2_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= alpha2_1dim__; ++sym1__) {
        current_statement__ = 2;
        assign(alpha2, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable alpha2");}
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= alpha2_1dim__; ++sym1__) {
        current_statement__ = 2;
        assign(alpha2, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(alpha2[(sym1__ - 1)], 0),
          "assigning variable alpha2");}
      std::vector<double> alpha3;
      alpha3 = std::vector<double>(alpha3_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= alpha3_1dim__; ++sym1__) {
        current_statement__ = 3;
        assign(alpha3, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable alpha3");}
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= alpha3_1dim__; ++sym1__) {
        current_statement__ = 3;
        assign(alpha3, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(alpha3[(sym1__ - 1)], 0),
          "assigning variable alpha3");}
      std::vector<double> a1;
      a1 = std::vector<double>(a1_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= a1_1dim__; ++sym1__) {
        current_statement__ = 4;
        assign(a1, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable a1");}
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= a1_1dim__; ++sym1__) {
        current_statement__ = 4;
        assign(a1, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(a1[(sym1__ - 1)], 0, 1),
          "assigning variable a1");}
      std::vector<double> a2;
      a2 = std::vector<double>(a2_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= a2_1dim__; ++sym1__) {
        current_statement__ = 5;
        assign(a2, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable a2");}
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= a2_1dim__; ++sym1__) {
        current_statement__ = 5;
        assign(a2, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(a2[(sym1__ - 1)], 0, 1),
          "assigning variable a2");}
      std::vector<double> a3;
      a3 = std::vector<double>(a3_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= a3_1dim__; ++sym1__) {
        current_statement__ = 6;
        assign(a3, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable a3");}
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= a3_1dim__; ++sym1__) {
        current_statement__ = 6;
        assign(a3, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(a3[(sym1__ - 1)], 0, 1),
          "assigning variable a3");}
      std::vector<double> a4;
      a4 = std::vector<double>(a4_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= a4_1dim__; ++sym1__) {
        current_statement__ = 7;
        assign(a4, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable a4");}
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= a4_1dim__; ++sym1__) {
        current_statement__ = 7;
        assign(a4, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(a4[(sym1__ - 1)], 0, 1),
          "assigning variable a4");}
      std::vector<double> mu2;
      mu2 = std::vector<double>(mu2_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= mu2_1dim__; ++sym1__) {
        current_statement__ = 8;
        assign(mu2, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable mu2");}
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= mu2_1dim__; ++sym1__) {
        current_statement__ = 8;
        assign(mu2, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(mu2[(sym1__ - 1)], 0),
          "assigning variable mu2");}
      std::vector<double> mu3;
      mu3 = std::vector<double>(mu3_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= mu3_1dim__; ++sym1__) {
        current_statement__ = 9;
        assign(mu3, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable mu3");}
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= mu3_1dim__; ++sym1__) {
        current_statement__ = 9;
        assign(mu3, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(mu3[(sym1__ - 1)], 0, max(x)),
          "assigning variable mu3");}
      std::vector<double> lambda2;
      lambda2 = std::vector<double>(lambda2_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= lambda2_1dim__; ++sym1__) {
        current_statement__ = 10;
        assign(lambda2, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable lambda2");}
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= lambda2_1dim__; ++sym1__) {
        current_statement__ = 10;
        assign(lambda2, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(lambda2[(sym1__ - 1)], 0),
          "assigning variable lambda2");}
      std::vector<double> lambda3;
      lambda3 = std::vector<double>(lambda3_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= lambda3_1dim__; ++sym1__) {
        current_statement__ = 11;
        assign(lambda3, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable lambda3");}
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= lambda3_1dim__; ++sym1__) {
        current_statement__ = 11;
        assign(lambda3, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(lambda3[(sym1__ - 1)], 0),
          "assigning variable lambda3");}
      std::vector<double> lambda4;
      lambda4 = std::vector<double>(lambda4_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 12;
      for (int sym1__ = 1; sym1__ <= lambda4_1dim__; ++sym1__) {
        current_statement__ = 12;
        assign(lambda4, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable lambda4");}
      current_statement__ = 12;
      for (int sym1__ = 1; sym1__ <= lambda4_1dim__; ++sym1__) {
        current_statement__ = 12;
        assign(lambda4, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::ub_constrain(lambda4[(sym1__ - 1)], 0.05),
          "assigning variable lambda4");}
      double c;
      c = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 13;
      c = in__.scalar();
      current_statement__ = 13;
      c = stan::math::lub_constrain(c, 0, 1);
      Eigen::Matrix<double, -1, 1> mu_rc;
      mu_rc = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(mu_rc, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> mu_rc_1;
      mu_rc_1 = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(mu_rc_1, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> mu_rc_2;
      mu_rc_2 = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(mu_rc_2, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> mu_rc_3;
      mu_rc_3 = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(mu_rc_3, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> mu_rc_4;
      mu_rc_4 = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(mu_rc_4, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> zero;
      zero = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(zero, std::numeric_limits<double>::quiet_NaN());
      
      for (int sym1__ = 1; sym1__ <= alpha1_1dim__; ++sym1__) {
        vars__.emplace_back(alpha1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= alpha2_1dim__; ++sym1__) {
        vars__.emplace_back(alpha2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= alpha3_1dim__; ++sym1__) {
        vars__.emplace_back(alpha3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= a1_1dim__; ++sym1__) {
        vars__.emplace_back(a1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= a2_1dim__; ++sym1__) {
        vars__.emplace_back(a2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= a3_1dim__; ++sym1__) {
        vars__.emplace_back(a3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= a4_1dim__; ++sym1__) {
        vars__.emplace_back(a4[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= mu2_1dim__; ++sym1__) {
        vars__.emplace_back(mu2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= mu3_1dim__; ++sym1__) {
        vars__.emplace_back(mu3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= lambda2_1dim__; ++sym1__) {
        vars__.emplace_back(lambda2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= lambda3_1dim__; ++sym1__) {
        vars__.emplace_back(lambda3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= lambda4_1dim__; ++sym1__) {
        vars__.emplace_back(lambda4[(sym1__ - 1)]);}
      vars__.emplace_back(c);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 22;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 20;
        assign(zero, cons_list(index_uni(i), nil_index_list()), 0,
          "assigning variable zero");}
      current_statement__ = 23;
      assign(mu_rc_1, nil_index_list(),
        (logical_eq(pre_working_age, 1) ?
           stan::math::eval(multiply(a1[(1 - 1)],
                              stan::math::exp(multiply(-alpha1[(1 - 1)], x))))
           : stan::math::eval(zero)), "assigning variable mu_rc_1");
      current_statement__ = 24;
      assign(mu_rc_2, nil_index_list(),
        (logical_eq(working_age, 1) ?
           stan::math::eval(multiply(a2[(1 - 1)],
                              stan::math::exp(
                                subtract(
                                  multiply(-alpha2[(1 - 1)],
                                    subtract(x, mu2[(1 - 1)])),
                                  stan::math::exp(
                                    multiply(-lambda2[(1 - 1)],
                                      subtract(x, mu2[(1 - 1)]))))))) :
           stan::math::eval(zero)), "assigning variable mu_rc_2");
      current_statement__ = 25;
      assign(mu_rc_3, nil_index_list(),
        (logical_eq(retirement, 1) ?
           stan::math::eval(multiply(a3[(1 - 1)],
                              stan::math::exp(
                                subtract(
                                  multiply(-alpha3[(1 - 1)],
                                    subtract(x, mu3[(1 - 1)])),
                                  stan::math::exp(
                                    multiply(-lambda3[(1 - 1)],
                                      subtract(x, mu3[(1 - 1)]))))))) :
           stan::math::eval(zero)), "assigning variable mu_rc_3");
      current_statement__ = 26;
      assign(mu_rc_4, nil_index_list(),
        (logical_eq(post_retirement, 1) ?
           stan::math::eval(multiply(a4[(1 - 1)],
                              stan::math::exp(multiply(lambda4[(1 - 1)], x))))
           : stan::math::eval(zero)), "assigning variable mu_rc_4");
      current_statement__ = 27;
      assign(mu_rc, nil_index_list(),
        add(add(add(add(mu_rc_1, mu_rc_2), mu_rc_3), mu_rc_4), c),
        "assigning variable mu_rc");
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          vars__.emplace_back(mu_rc[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          vars__.emplace_back(mu_rc_1[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          vars__.emplace_back(mu_rc_2[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          vars__.emplace_back(mu_rc_3[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          vars__.emplace_back(mu_rc_4[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          vars__.emplace_back(zero[(sym1__ - 1)]);}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      std::vector<double> alpha1;
      alpha1 = std::vector<double>(alpha1_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      assign(alpha1, nil_index_list(), context__.vals_r("alpha1"),
        "assigning variable alpha1");
      std::vector<double> alpha1_free__;
      alpha1_free__ = std::vector<double>(alpha1_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= alpha1_1dim__; ++sym1__) {
        current_statement__ = 1;
        assign(alpha1_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(alpha1[(sym1__ - 1)], 0),
          "assigning variable alpha1_free__");}
      std::vector<double> alpha2;
      alpha2 = std::vector<double>(alpha2_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      assign(alpha2, nil_index_list(), context__.vals_r("alpha2"),
        "assigning variable alpha2");
      std::vector<double> alpha2_free__;
      alpha2_free__ = std::vector<double>(alpha2_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= alpha2_1dim__; ++sym1__) {
        current_statement__ = 2;
        assign(alpha2_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(alpha2[(sym1__ - 1)], 0),
          "assigning variable alpha2_free__");}
      std::vector<double> alpha3;
      alpha3 = std::vector<double>(alpha3_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      assign(alpha3, nil_index_list(), context__.vals_r("alpha3"),
        "assigning variable alpha3");
      std::vector<double> alpha3_free__;
      alpha3_free__ = std::vector<double>(alpha3_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= alpha3_1dim__; ++sym1__) {
        current_statement__ = 3;
        assign(alpha3_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(alpha3[(sym1__ - 1)], 0),
          "assigning variable alpha3_free__");}
      std::vector<double> a1;
      a1 = std::vector<double>(a1_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      assign(a1, nil_index_list(), context__.vals_r("a1"),
        "assigning variable a1");
      std::vector<double> a1_free__;
      a1_free__ = std::vector<double>(a1_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= a1_1dim__; ++sym1__) {
        current_statement__ = 4;
        assign(a1_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(a1[(sym1__ - 1)], 0, 1),
          "assigning variable a1_free__");}
      std::vector<double> a2;
      a2 = std::vector<double>(a2_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      assign(a2, nil_index_list(), context__.vals_r("a2"),
        "assigning variable a2");
      std::vector<double> a2_free__;
      a2_free__ = std::vector<double>(a2_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= a2_1dim__; ++sym1__) {
        current_statement__ = 5;
        assign(a2_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(a2[(sym1__ - 1)], 0, 1),
          "assigning variable a2_free__");}
      std::vector<double> a3;
      a3 = std::vector<double>(a3_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      assign(a3, nil_index_list(), context__.vals_r("a3"),
        "assigning variable a3");
      std::vector<double> a3_free__;
      a3_free__ = std::vector<double>(a3_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= a3_1dim__; ++sym1__) {
        current_statement__ = 6;
        assign(a3_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(a3[(sym1__ - 1)], 0, 1),
          "assigning variable a3_free__");}
      std::vector<double> a4;
      a4 = std::vector<double>(a4_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      assign(a4, nil_index_list(), context__.vals_r("a4"),
        "assigning variable a4");
      std::vector<double> a4_free__;
      a4_free__ = std::vector<double>(a4_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= a4_1dim__; ++sym1__) {
        current_statement__ = 7;
        assign(a4_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(a4[(sym1__ - 1)], 0, 1),
          "assigning variable a4_free__");}
      std::vector<double> mu2;
      mu2 = std::vector<double>(mu2_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 8;
      assign(mu2, nil_index_list(), context__.vals_r("mu2"),
        "assigning variable mu2");
      std::vector<double> mu2_free__;
      mu2_free__ = std::vector<double>(mu2_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= mu2_1dim__; ++sym1__) {
        current_statement__ = 8;
        assign(mu2_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(mu2[(sym1__ - 1)], 0),
          "assigning variable mu2_free__");}
      std::vector<double> mu3;
      mu3 = std::vector<double>(mu3_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 9;
      assign(mu3, nil_index_list(), context__.vals_r("mu3"),
        "assigning variable mu3");
      std::vector<double> mu3_free__;
      mu3_free__ = std::vector<double>(mu3_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= mu3_1dim__; ++sym1__) {
        current_statement__ = 9;
        assign(mu3_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(mu3[(sym1__ - 1)], 0, max(x)),
          "assigning variable mu3_free__");}
      std::vector<double> lambda2;
      lambda2 = std::vector<double>(lambda2_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 10;
      assign(lambda2, nil_index_list(), context__.vals_r("lambda2"),
        "assigning variable lambda2");
      std::vector<double> lambda2_free__;
      lambda2_free__ = std::vector<double>(lambda2_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= lambda2_1dim__; ++sym1__) {
        current_statement__ = 10;
        assign(lambda2_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(lambda2[(sym1__ - 1)], 0),
          "assigning variable lambda2_free__");}
      std::vector<double> lambda3;
      lambda3 = std::vector<double>(lambda3_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 11;
      assign(lambda3, nil_index_list(), context__.vals_r("lambda3"),
        "assigning variable lambda3");
      std::vector<double> lambda3_free__;
      lambda3_free__ = std::vector<double>(lambda3_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= lambda3_1dim__; ++sym1__) {
        current_statement__ = 11;
        assign(lambda3_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(lambda3[(sym1__ - 1)], 0),
          "assigning variable lambda3_free__");}
      std::vector<double> lambda4;
      lambda4 = std::vector<double>(lambda4_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 12;
      assign(lambda4, nil_index_list(), context__.vals_r("lambda4"),
        "assigning variable lambda4");
      std::vector<double> lambda4_free__;
      lambda4_free__ = std::vector<double>(lambda4_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 12;
      for (int sym1__ = 1; sym1__ <= lambda4_1dim__; ++sym1__) {
        current_statement__ = 12;
        assign(lambda4_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::ub_free(lambda4[(sym1__ - 1)], 0.05),
          "assigning variable lambda4_free__");}
      double c;
      c = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 13;
      c = context__.vals_r("c")[(1 - 1)];
      double c_free__;
      c_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 13;
      c_free__ = stan::math::lub_free(c, 0, 1);
      for (int sym1__ = 1; sym1__ <= alpha1_1dim__; ++sym1__) {
        vars__.emplace_back(alpha1_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= alpha2_1dim__; ++sym1__) {
        vars__.emplace_back(alpha2_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= alpha3_1dim__; ++sym1__) {
        vars__.emplace_back(alpha3_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= a1_1dim__; ++sym1__) {
        vars__.emplace_back(a1_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= a2_1dim__; ++sym1__) {
        vars__.emplace_back(a2_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= a3_1dim__; ++sym1__) {
        vars__.emplace_back(a3_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= a4_1dim__; ++sym1__) {
        vars__.emplace_back(a4_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= mu2_1dim__; ++sym1__) {
        vars__.emplace_back(mu2_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= mu3_1dim__; ++sym1__) {
        vars__.emplace_back(mu3_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= lambda2_1dim__; ++sym1__) {
        vars__.emplace_back(lambda2_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= lambda3_1dim__; ++sym1__) {
        vars__.emplace_back(lambda3_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= lambda4_1dim__; ++sym1__) {
        vars__.emplace_back(lambda4_free__[(sym1__ - 1)]);}
      vars__.emplace_back(c_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("alpha1");
    names__.emplace_back("alpha2");
    names__.emplace_back("alpha3");
    names__.emplace_back("a1");
    names__.emplace_back("a2");
    names__.emplace_back("a3");
    names__.emplace_back("a4");
    names__.emplace_back("mu2");
    names__.emplace_back("mu3");
    names__.emplace_back("lambda2");
    names__.emplace_back("lambda3");
    names__.emplace_back("lambda4");
    names__.emplace_back("c");
    names__.emplace_back("mu_rc");
    names__.emplace_back("mu_rc_1");
    names__.emplace_back("mu_rc_2");
    names__.emplace_back("mu_rc_3");
    names__.emplace_back("mu_rc_4");
    names__.emplace_back("zero");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(alpha1_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(alpha2_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(alpha3_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(a1_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(a2_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(a3_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(a4_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(mu2_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(mu3_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(lambda2_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(lambda3_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(lambda4_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= alpha1_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha1" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= alpha2_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha2" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= alpha3_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha3" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= a1_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "a1" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= a2_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "a2" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= a3_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "a3" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= a4_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "a4" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= mu2_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu2" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= mu3_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu3" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= lambda2_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lambda2" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= lambda3_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lambda3" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= lambda4_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lambda4" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "c");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu_rc" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu_rc_1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu_rc_2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu_rc_3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu_rc_4" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "zero" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= alpha1_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha1" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= alpha2_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha2" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= alpha3_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha3" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= a1_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "a1" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= a2_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "a2" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= a3_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "a3" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= a4_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "a4" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= mu2_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu2" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= mu3_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu3" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= lambda2_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lambda2" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= lambda3_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lambda3" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= lambda4_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lambda4" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "c");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu_rc" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu_rc_1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu_rc_2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu_rc_3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu_rc_4" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "zero" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"alpha1\",\"type\":{\"name\":\"array\",\"length\":" << alpha1_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"alpha2\",\"type\":{\"name\":\"array\",\"length\":" << alpha2_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"alpha3\",\"type\":{\"name\":\"array\",\"length\":" << alpha3_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"a1\",\"type\":{\"name\":\"array\",\"length\":" << a1_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"a2\",\"type\":{\"name\":\"array\",\"length\":" << a2_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"a3\",\"type\":{\"name\":\"array\",\"length\":" << a3_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"a4\",\"type\":{\"name\":\"array\",\"length\":" << a4_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"mu2\",\"type\":{\"name\":\"array\",\"length\":" << mu2_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"mu3\",\"type\":{\"name\":\"array\",\"length\":" << mu3_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"lambda2\",\"type\":{\"name\":\"array\",\"length\":" << lambda2_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"lambda3\",\"type\":{\"name\":\"array\",\"length\":" << lambda3_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"lambda4\",\"type\":{\"name\":\"array\",\"length\":" << lambda4_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"c\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_rc\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"mu_rc_1\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"mu_rc_2\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"mu_rc_3\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"mu_rc_4\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"zero\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"alpha1\",\"type\":{\"name\":\"array\",\"length\":" << alpha1_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"alpha2\",\"type\":{\"name\":\"array\",\"length\":" << alpha2_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"alpha3\",\"type\":{\"name\":\"array\",\"length\":" << alpha3_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"a1\",\"type\":{\"name\":\"array\",\"length\":" << a1_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"a2\",\"type\":{\"name\":\"array\",\"length\":" << a2_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"a3\",\"type\":{\"name\":\"array\",\"length\":" << a3_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"a4\",\"type\":{\"name\":\"array\",\"length\":" << a4_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"mu2\",\"type\":{\"name\":\"array\",\"length\":" << mu2_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"mu3\",\"type\":{\"name\":\"array\",\"length\":" << mu3_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"lambda2\",\"type\":{\"name\":\"array\",\"length\":" << lambda2_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"lambda3\",\"type\":{\"name\":\"array\",\"length\":" << lambda3_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"lambda4\",\"type\":{\"name\":\"array\",\"length\":" << lambda4_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"c\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_rc\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"mu_rc_1\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"mu_rc_2\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"mu_rc_3\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"mu_rc_4\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"zero\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_rcmodel_poisson_namespace::model_rcmodel_poisson;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_rcmodel_poisson_namespace::profiles__;
}
#endif
#endif
